"use strict";

var INCOME = 60000,
    DEDUCTIBLE = 5000,
    PREMIUM = 600,
    EMPLOYED = true;

var currentMonthly = DEDUCTIBLE / 12 + PREMIUM;
var padding = 5;

$(function () {

  var computeContribution = function computeContribution(d) {
    if (d < 25000) {
      return 0;
    } else if (d >= 25000 && d < 50000) {
      return (d - 25000) * 0.09 / 12;
    } else if (d >= 50000 && d < 75000) {
      return (d - 25000) * 0.11 / 12;
    } else if (d >= 75000 && d < 100000) {
      return (d - 25000) * 0.12 / 12;
    } else if (d >= 100000 && d < 200000) {
      return (d - 25000) * 0.14 / 12;
    } else {
      return (d - 25000) * 0.16 / 12;
    }
  };

  var computeEmployerContrib = function computeEmployerContrib(d) {
    return computeContribution(d) * 0.8;
  };

  var updateContribText = function updateContribText(d) {
    var totalContribution = computeContribution(d);
    var selfShare = totalContribution * 0.2,
        bossShare = totalContribution * 0.8;
    var data = d3.select(".bar[selected=true]").attr("data-val");
    var y = contribScale(computeContribution(data));
    var x = incomeScale(data);

    barValue.attr("transform", "translate(" + (x - (totalContribution < currentMonthly ? 30 : 0)) + ", " + y + ")");
    var textChild = barValue.select("text");
    var rectChild = barValue.select("rect");
    var bbox = textChild.node().getBBox();

    rectChild.attr("width", bbox.width + padding).attr("height", bbox.height + padding);

    textChild.text(d3.format("$.2s")(parseInt(totalContribution)));
  };

  var updateIncomeLabel = function updateIncomeLabel(d, y) {

    var x = incomeScale(d);

    var textChild = incomeValue.select("text");
    var rectChild = incomeValue.select("rect");
    var bbox = textChild.node().getBBox();

    incomeValue.attr("transform", "translate(" + (x - bbox.width / 4) + ", " + (y + 30) + ")");
    rectChild.attr("width", bbox.width + padding).attr("height", bbox.height + padding);

    textChild.text(d3.format("$,.4s")(d));
  };
  //1. Show a bar chart

  //2. Bar chart should have a guide at the top of it

  //3. Have a draggable slider


  var svg = d3.select("svg#chart"),
      margin = { top: 20, right: 40, bottom: 30, left: 20 },
      width = +svg.attr("width") - margin.left - margin.right,
      height = +svg.attr("height") - margin.top - margin.bottom,
      barWidth = 18,
      barGap = 2;

  // SCALES
  var incomeScale = d3.scaleLog().domain([Math.pow(10, 4), 6 * Math.pow(10, 5)]).range([0, width]);
  var contribScale = d3.scaleLinear().domain([0, 7000]).range([height, 0]);

  // AXIS
  var payPoints = [10000, 25000, 50000, 60000, 75000, 100000, 200000, 300000, 600000];
  var xAxis = d3.axisBottom(incomeScale).tickValues(payPoints).tickFormat(function (d) {
    return d3.format("$.1s")(d);
  });

  // BARS
  var barCount = width / (barWidth + barGap);
  var dataPoints = [];

  //Get data points
  while (dataPoints.length * (barWidth + barGap) < width) {
    var value = incomeScale.invert(dataPoints.length * (barWidth + barGap));
    dataPoints.push(parseInt(value));
  }

  var yAxis = d3.axisRight(contribScale).tickFormat(function (d) {
    return d3.format("$.2s")(d);
  });

  //

  svg.append("g").attr("class", "y--axis y--axis--monthly").attr("transform", "translate(" + (width + margin.left) + ", " + margin.top + ")").call(yAxis);

  svg.append("g").attr("class", "x--axis x--axis--income").attr("transform", "translate(" + margin.left / 2 + "," + (height + margin.top) + ")").call(xAxis);

  var bars = svg.append("g").attr("transform", "translate(" + margin.left / 2 + "," + margin.top + ")");;

  var barValue = svg.append("g").attr("class", "bar--value-container");
  barValue.append("rect").attr("class", "bar-container");
  barValue.append("text").attr("class", "bar--value");

  var incomeValue = svg.append("g").attr("class", "income--value-container");
  incomeValue.append("rect").attr("class", "income--container");
  incomeValue.append("text").attr("class", "income--value");

  // Build the bars
  var barsItem = bars.selectAll(".bar").data(dataPoints).enter().append("g").attr("class", "bar").attr("data-y", function (d) {
    return contribScale(computeContribution(d));
  }).attr("data-val", function (d) {
    return d;
  });

  barsItem.append("rect").attr("class", "contribution").attr("x", function (d, ind) {
    return ind * (barWidth + barGap);
  }).attr("y", function (d) {
    return contribScale(computeContribution(d));
  }).attr("width", barWidth).attr("height", function (d) {
    return height - contribScale(computeContribution(d) - computeEmployerContrib(d));
  });

  barsItem.append("rect").attr("class", "employer").attr("x", function (d, ind) {
    return ind * (barWidth + barGap);
  }).attr("y", function (d) {
    return contribScale(computeEmployerContrib(d));
  }).attr("width", barWidth).attr("height", function (d) {
    return height - contribScale(computeEmployerContrib(d));
  });
  //

  var container = svg.append("g").attr("class", "horizontal--slider").attr("transform", "translate(" + margin.left / 2 + ", " + (height + margin.top) + ")");

  container.call(calculatorSlider({
    scale: incomeScale,
    initialValue: INCOME,
    callback: function callback(value) {
      var selectedItem = Math.floor(incomeScale(value) / (barWidth + barGap));
      barsItem.attr("selected", function (d, ind) {
        return selectedItem === ind;
      });
      updateContribText(value);
      updateIncomeLabel(value, height);
    }
  }));

  updateContribText(INCOME);
  updateIncomeLabel(INCOME, height);

  svg.append("g").attr("transform", "translate(" + margin.left / 2 + "," + margin.top + ")").append("rect").attr("class", "current-expense").attr("x", 0).attr("width", width).attr("height", 1).attr("y", contribScale(currentMonthly));
});
"use strict";

var calculatorSlider = function calculatorSlider(_ref) {
    var scale = _ref.scale,
        callback = _ref.callback,
        initialValue = _ref.initialValue;
    return function (container) {

        var x = scale.clamp(true);

        x;

        var slider = container.append("g").attr("class", "slider");

        slider.append("line").attr("class", "track").attr("x1", x.range()[0]).attr("x2", x.range()[1]).select(function () {
            return this.parentNode.appendChild(this.cloneNode(true));
        }).attr("class", "track-inset").select(function () {
            return this.parentNode.appendChild(this.cloneNode(true));
        }).attr("class", "track-overlay").call(d3.drag().on("start.interrupt", function () {
            slider.interrupt();
        }).on("start drag", function () {
            scale(d3.event.x);
            handle.attr("cx", d3.event.x);
            callback(scale.invert(d3.event.x));
        }));

        // slider.insert("g", ".track-overlay")
        //     .attr("class", "ticks")
        //     .attr("transform", "translate(0," + 18 + ")")
        //   .selectAll("text")
        //   .data(x.ticks(10))
        //   .enter().append("text")
        //     .attr("x", x)
        //     .attr("text-anchor", "middle")
        //     .text(function(d) { return d; });

        var handle = slider.insert("circle", ".track-overlay").attr("class", "handle").attr("r", 9);

        // slider.transition() // Gratuitous intro!
        //     .duration(750)
        //     .tween("hue", function() {
        //       var i = d3.interpolate(0, 70);
        //       return function(t) {
        //         handle.attr("cx", x(t));
        //         callback(i(t));
        //       };
        //     });

        handle.attr("cx", x(initialValue || 60000));
        callback(initialValue || 60000);
    };
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
